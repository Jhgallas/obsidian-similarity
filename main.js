/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var path = __toESM(require("path"));
var import_fs = require("fs");
var DEFAULT_SETTINGS = {
  nodePositions: []
};
var MyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.ongoingBuffer = /* @__PURE__ */ new Set();
    this.reloadBuffer = /* @__PURE__ */ new Set();
    this.ongoingTimeouts = /* @__PURE__ */ new Map();
  }
  async onload() {
    this.setPythonCommand();
    await this.loadSettings();
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.addCommands();
    await this.checkPythonRequirements();
    await this.runTokenizerScriptOnLoad();
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (file instanceof import_obsidian.TFile) {
          console.log(`File modified: ${file.path}`);
          this.addToOngoingBuffer(file.path);
          this.addToReloadBuffer(file.path);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian.TFile) {
          console.log(`File moved or renamed from ${oldPath} to ${file.path}`);
          this.addToOngoingBuffer(file.path);
          this.addToReloadBuffer(file.path);
        }
      })
    );
  }
  addToOngoingBuffer(filePath) {
    if (!this.ongoingBuffer.has(filePath)) {
      this.ongoingBuffer.add(filePath);
      const timeout = setTimeout(() => {
        this.updateSingleFile(filePath);
        this.ongoingBuffer.delete(filePath);
        this.ongoingTimeouts.delete(filePath);
      }, 1e4);
      this.ongoingTimeouts.set(filePath, timeout);
    }
  }
  addToReloadBuffer(filePath) {
    if (!this.reloadBuffer.has(filePath)) {
      this.reloadBuffer.add(filePath);
    }
  }
  async runTokenizerScriptOnLoad() {
    const adapter = this.app.vault.adapter;
    let basePath = "";
    if (adapter instanceof import_obsidian.FileSystemAdapter) {
      basePath = adapter.getBasePath();
    }
    const envPath = path.join(basePath, ".obsidian", "plugins", "obsidian-similarity-toolkit", "Python", "obsidiansimilarity");
    const flagPath = path.join(envPath, "setup_complete.flag");
    try {
      await import_fs.promises.access(flagPath);
      await this.runTokenizerScript();
    } catch (error) {
      console.error("Tokenizer script cannot run: Environment setup is not complete.");
      new import_obsidian.Notice("Tokenizer script cannot run: Please ensure all packages are installed.");
    }
  }
  setPythonCommand() {
    this.pythonCommand = navigator.platform.startsWith("Win") ? "python" : "python3";
    console.log("Using Python command:", this.pythonCommand);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async checkPythonRequirements() {
    const adapter = this.app.vault.adapter;
    let basePath = "";
    if (adapter instanceof import_obsidian.FileSystemAdapter) {
      basePath = adapter.getBasePath();
    }
    const envPath = path.join(basePath, ".obsidian", "plugins", "obsidian-similarity-toolkit", "Python", "obsidiansimilarity");
    const requirementsPath = path.join(basePath, ".obsidian", "plugins", "obsidian-similarity-toolkit", "Python", "requirements.txt");
    const flagPath = path.join(envPath, "setup_complete.flag");
    try {
      await import_fs.promises.access(flagPath);
      console.log("Environment setup is already complete.");
      return;
    } catch (error) {
      console.log("Environment setup is not complete. Starting setup...");
    }
    const notice = new import_obsidian.Notice("Setting up Python environment for Obsidian Similarity Toolkit. Please wait...", 6e5);
    let environmentCreated = false;
    try {
      await import_fs.promises.stat(envPath);
      console.log("Virtual environment already exists.");
    } catch (error) {
      if (error.code === "ENOENT") {
        console.log("Virtual environment not found, attempting to create one...");
        try {
          const createEnvProcess = (0, import_child_process.spawn)(this.pythonCommand, ["-m", "venv", envPath]);
          await new Promise((resolve, reject) => {
            createEnvProcess.on("close", (code) => {
              if (code === 0) {
                console.log("Virtual environment created successfully.");
                new import_obsidian.Notice("Environment folder succesfully created.");
                environmentCreated = true;
                resolve(code);
              } else {
                console.error(`Failed to create virtual environment with exit code: ${code}`);
                new import_obsidian.Notice("Failed to create virtual environment. Please check your Python installation.");
                reject(new Error(`Failed to create virtual environment with code ${code}`));
              }
            });
          });
        } catch (error2) {
          console.error("Error during virtual environment creation:", error2);
          new import_obsidian.Notice("Failed to create virtual environment. Please check your Python installation.");
          return;
        }
      } else {
        console.error("Error checking virtual environment:", error);
        new import_obsidian.Notice("Error checking virtual environment. Please check your permissions and file system.");
        return;
      }
    }
    if (environmentCreated) {
      let pythonExecutable = path.join(envPath, navigator.platform.startsWith("Win") ? "Scripts\\python.exe" : "bin/python3");
      const installCmd = (0, import_child_process.spawn)(pythonExecutable, ["-m", "pip", "install", "-r", requirementsPath]);
      installCmd.stdout.on("data", (data) => {
        console.log(data.toString());
      });
      installCmd.stderr.on("data", (data) => {
        const errorOutput = data.toString();
        console.error(`stderr: ${errorOutput}`);
        new import_obsidian.Notice(`Error during package installation: ${errorOutput}`);
      });
      await new Promise((resolve, reject) => {
        installCmd.on("close", (code) => {
          if (code === 0) {
            console.log("All packages installed successfully.");
            new import_obsidian.Notice("All packages installed successfully.");
            resolve();
          } else {
            console.error(`Failed to install packages with code ${code}`);
            new import_obsidian.Notice(`Failed to install packages. Please check the installation logs.`);
            reject(new Error(`Failed to install packages with code ${code}`));
          }
        });
      });
      try {
        await import_fs.promises.writeFile(path.join(envPath, "setup_complete.flag"), "Setup complete");
        new import_obsidian.Notice("Environment setup is complete.");
        setTimeout(() => notice.hide(), 1e3);
      } catch (error) {
        console.error("Failed to create setup complete flag file:", error);
        new import_obsidian.Notice("Failed to create setup complete flag file. Please check your permissions and file system.");
      }
    } else {
      console.log("Skipping package installation as the virtual environment already exists.");
    }
  }
  addCommands() {
    this.addCommand({
      id: "similarity-graph-position",
      name: "Organize graph with similarity",
      callback: async () => {
        const notice = new import_obsidian.Notice("Organizing graph based on similarity...", 6e4);
        console.log("Attempting to run T-SNE and restore node positions...");
        await this.runGraphTsne();
        const graphLeaf = this.findGraphLeaf();
        if (graphLeaf) {
          console.log("Graph leaf found, restoring data...");
          this.restoreGraphData(graphLeaf);
        } else {
          console.log("No graph leaf found or multiple leaves present.");
          new import_obsidian.Notice("Graph view must be singular and active");
        }
        notice.hide();
      }
    });
    this.addCommand({
      id: "manual-run-embeddings",
      name: "Manually re-calculate embeddings",
      callback: () => this.runTokenizerScript()
    });
    this.addCommand({
      id: "update-single-file",
      name: "Update embedding for current file",
      callback: () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (!activeFile) {
          new import_obsidian.Notice("No file is currently active.");
          return;
        }
        this.updateSingleFile(activeFile.path);
      }
    });
  }
  findGraphLeaf() {
    let graphLeaves = this.app.workspace.getLeavesOfType("graph");
    console.log(`Found ${graphLeaves.length} graph leaves.`);
    if (graphLeaves.length === 1) {
      return graphLeaves[0];
    }
    return null;
  }
  restoreGraphData(graphLeaf) {
    if (!graphLeaf) {
      console.log("No graph leaf provided to restoreGraphData.");
      return;
    }
    const nodePositions = this.settings.nodePositions;
    if (nodePositions.length === 0) {
      console.log("No node positions available in settings.");
      return;
    }
    nodePositions.forEach((node) => {
      console.log(`Restoring position for node ${node.id}: (${node.x}, ${node.y})`);
      graphLeaf.view.renderer.worker.postMessage({
        forceNode: {
          id: node.id,
          x: node.x,
          y: node.y
        }
      });
    });
    graphLeaf.view.renderer.worker.postMessage({
      run: true,
      alpha: 0.1
    });
    console.log("Redraw triggered.");
  }
  async runTokenizerScript() {
    let adapter = this.app.vault.adapter;
    let basePath = "";
    if (adapter instanceof import_obsidian.FileSystemAdapter) {
      basePath = adapter.getBasePath();
    }
    const envPath = path.join(basePath, ".obsidian", "plugins", "obsidian-similarity-toolkit", "Python", "obsidiansimilarity");
    const flagPath = path.join(envPath, "setup_complete.flag");
    const csvPath = path.join(".obsidian", "plugins", "obsidian-similarity-toolkit", "embeddings.csv");
    try {
      await import_fs.promises.access(flagPath);
    } catch (error) {
      console.error("Environment setup is not complete. Please ensure all packages are installed.");
      new import_obsidian.Notice("Environment setup is not complete. Please ensure all packages are installed.");
      return;
    }
    const pythonExecutable = path.join(envPath, navigator.platform.startsWith("Win") ? "Scripts\\python.exe" : "bin/python3");
    const scriptPath = path.join(basePath, ".obsidian", "plugins", "obsidian-similarity-toolkit", "Python", "tokenizer.py");
    let notice;
    try {
      await this.app.vault.adapter.read(csvPath);
      notice = new import_obsidian.Notice("Vault embeddings will be updated");
    } catch (error) {
      notice = new import_obsidian.Notice("Creating initial embeddings for vault", 6e5);
    }
    const process = (0, import_child_process.spawn)(pythonExecutable, [scriptPath, basePath]);
    let csvContent = "";
    process.stdout.on("data", (data) => {
      csvContent += data.toString();
    });
    process.stderr.on("data", (data) => {
      console.error(`stderr: ${data}`);
    });
    process.on("close", (code) => {
      if (code !== 0) {
        console.error(`Process exited with code ${code}`);
        new import_obsidian.Notice("Error running tokenizer script.");
      } else {
        csvContent = csvContent.trim();
        const lines = csvContent.split("\n").filter((line) => line.trim() !== "");
        const updatedCsvContent = lines.join("\n");
        this.app.vault.adapter.write(csvPath, updatedCsvContent).then(() => {
          console.log("Vault embeddings updated successfully");
          new import_obsidian.Notice("Vault embeddings updated successfully.");
          this.reloadBuffer.forEach((filePath) => {
            this.updateSingleFile(filePath);
          });
          this.reloadBuffer.clear();
        }).catch((writeError) => {
          console.error(`Error writing embeddings file: ${writeError}`);
          new import_obsidian.Notice(`Error writing embeddings file: ${writeError}`);
        });
      }
      notice.hide();
    });
  }
  async runGraphTsne() {
    let adapter = this.app.vault.adapter;
    let basePath = "";
    if (adapter instanceof import_obsidian.FileSystemAdapter) {
      basePath = adapter.getBasePath();
    }
    const envPath = path.join(basePath, ".obsidian", "plugins", "obsidian-similarity-toolkit", "Python", "obsidiansimilarity");
    const scriptPath = path.join(basePath, ".obsidian", "plugins", "obsidian-similarity-toolkit", "Python", "sne-to-data.py");
    const csvPath = path.join(basePath, ".obsidian", "plugins", "obsidian-similarity-toolkit", "embeddings.csv");
    const pythonExecutable = path.join(envPath, navigator.platform.startsWith("Win") ? "Scripts\\python.exe" : "bin/python3");
    const process = (0, import_child_process.spawn)(pythonExecutable, [scriptPath, csvPath]);
    let output = "";
    process.stdout.on("data", (data) => {
      output += data.toString();
    });
    process.stderr.on("data", (data) => {
      console.error(`stderr: ${data}`);
    });
    return new Promise((resolve, reject) => {
      process.on("close", (code) => {
        if (code !== 0) {
          console.error(`Process exited with code ${code}`);
          new import_obsidian.Notice("Error running T-SNE script.");
          reject(`Process exited with code ${code}`);
        } else {
          try {
            const result = JSON.parse(output);
            this.settings.nodePositions = result.nodePositions;
            this.saveSettings();
            new import_obsidian.Notice("Node positions updated according to T-SNE");
            resolve();
          } catch (error) {
            console.error("Failed to parse output:", error);
            new import_obsidian.Notice("Failed to update node positions.");
            reject(error);
          }
        }
      });
    });
  }
  async updateSingleFile(filePath) {
    const adapter = this.app.vault.adapter;
    let basePath = "";
    if (adapter instanceof import_obsidian.FileSystemAdapter) {
      basePath = adapter.getBasePath();
    }
    const absoluteFilePath = path.join(basePath, filePath);
    const scriptPath = path.join(basePath, ".obsidian", "plugins", "obsidian-similarity-toolkit", "Python", "tokenizer.py");
    const process = (0, import_child_process.spawn)(this.pythonCommand, [scriptPath, absoluteFilePath]);
    process.stderr.on("data", (data) => {
      console.error(`stderr: ${data}`);
    });
    process.on("close", async (code) => {
      if (code !== 0) {
        console.error(`Process exited with code ${code}`);
        new import_obsidian.Notice("Error updating embedding.");
        return;
      }
      let newEmbedding = "";
      process.stdout.on("data", (data) => {
        newEmbedding += data.toString();
      });
      const csvPath = path.join(".obsidian", "plugins", "obsidian-similarity-toolkit", "embeddings.csv");
      let csvContent = await this.app.vault.adapter.read(csvPath);
      let lines = csvContent.split("\n");
      const index = lines.findIndex((line) => line.startsWith(filePath + ","));
      if (index !== -1) {
        lines.splice(index, 1);
      }
      lines.push(newEmbedding.trim());
      const updatedCsvContent = lines.filter((line) => line.trim() !== "").join("\n");
      await this.app.vault.adapter.write(csvPath, updatedCsvContent);
      console.log(`Updated embeddings for ${filePath}`);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
